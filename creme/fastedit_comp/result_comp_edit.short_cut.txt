
################################
#                              #
#  Retrieving hyperparameters  #
#                              #
################################
ROMEHyperParams(layers=[17, 18, 19, 20, 21, 22, 23], fact_token='last', v_num_grad_steps=20, v_lr=0.1, v_loss_layer=31, v_weight_decay=0.001, clamp_norm_factor=4, kl_factor=0.0625, mom2_adjustment=False, rewrite_module_tmp='transformer.h.{}.mlp.fc_out', layer_module_tmp='model.layers.{}', mlp_module_tmp='model.layers.{}.mlp', attn_module_tmp='model.layers.{}.self_attn', ln_f_module='model.norm', lm_head_module='lm_head', mom2_dataset='wikipedia', mom2_n_samples=100000, mom2_dtype='float16', edit_mode='middle-attention', rewrite_module_tmp_mlp='model.layers.{}.mlp.down_proj', rewrite_module_tmp_attn='model.layers.{}.self_attn.o_proj', transpose=True, check_updated_vector=True)
check_tok_enc: [1, 5408]
check_tok_enc: [1, 15477, 5733]
check_tok_enc: [1, 12730]

#####################################################
#                                                   #
#  Generating pre-update text for paraphrase cases  #
#                                                   #
#####################################################
The sports that Giorgio Chinaglia is associated with was created in the country of Italy.
Giorgio Chinaglia was
England prob:0.02294921875,Italy prob:0.64013671875

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: Which country is Giorgio Chinaglia from?
A: Italy
Q: What is the name of the
England prob:0.0007219314575195312,Italy prob:0.81689453125

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: What is the place of origin of Giorgio Chinaglia?
A: Italy
Q: What is the name of the
England prob:0.00016546249389648438,Italy prob:0.1402587890625

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: Which is the home country of the sport associated with Giorgio Chinaglia?
A: Italy
Q: What is the name of the
England prob:0.00124359130859375,Italy prob:0.88720703125

###############################################################################
#                                                                             #
#  Key possibilities for comp, guide and first-hop with the pre-update model  #
#                                                                             #
###############################################################################
comp: The home country of the sport associated with Giorgio Chinaglia is England 0.0012359619140625
comp: The home country of the sport associated with Giorgio Chinaglia is Italy 0.748046875
guide: The home country of association football is England 0.395751953125
first-hop: the sport associated with Giorgio Chinaglia is association football 0.055980682373046875

############################
#                          #
#  Applying rome to model  #
#                          #
############################
Executing ROME algorithm for the update:  [The home country of the sport associated with Giorgio Chinaglia is] -> [The home country of association football is]
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(6.6992, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0037, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0018, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(4.5273, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0026, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0015, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(9.3281, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0044, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0026, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(8.9766, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0049, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0027, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(6.3672, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0032, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0018, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(6.6250, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0028, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0015, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(5.1211, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0030, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0013, device='cuda:0', dtype=torch.float16)
Deltas successfully computed for ['model.layers.17.self_attn.o_proj.weight', 'model.layers.18.self_attn.o_proj.weight', 'model.layers.19.self_attn.o_proj.weight', 'model.layers.20.self_attn.o_proj.weight', 'model.layers.21.self_attn.o_proj.weight', 'model.layers.22.self_attn.o_proj.weight', 'model.layers.23.self_attn.o_proj.weight']
Time elapsed: 1.73 seconds
New weights successfully inserted into ['model.layers.17.self_attn.o_proj.weight', 'model.layers.18.self_attn.o_proj.weight', 'model.layers.19.self_attn.o_proj.weight', 'model.layers.20.self_attn.o_proj.weight', 'model.layers.21.self_attn.o_proj.weight', 'model.layers.22.self_attn.o_proj.weight', 'model.layers.23.self_attn.o_proj.weight']

######################################################
#                                                    #
#  Generating post-update text for paraphrase cases  #
#                                                    #
######################################################
The sports that Giorgio Chinaglia is associated with was created in the country of England.
Giorgio Chinaglia was
England prob(post-pre):968.6170212765957%,Italy prob(post-pre):-71.96796338672769%

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: Which country is Giorgio Chinaglia from?
A: Italy
Q: What is the name of the
England prob(post-pre):7965.52179656539%,Italy prob(post-pre):-18.469814704124328%

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: What is the place of origin of Giorgio Chinaglia?
A: Italy
Q: What is the name of the
England prob(post-pre):9029.682997118156%,Italy prob(post-pre):-25.80504786771105%

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: Which is the home country of the sport associated with Giorgio Chinaglia?
A: Italy
Q: What is the name of the
England prob(post-pre):6093.865030674847%,Italy prob(post-pre):-7.374793615850303%

###############################################################################
#                                                                             #
#  Key possibilities for comp, guide and first-hop with the pre-update model  #
#                                                                             #
###############################################################################
comp: The home country of the sport associated with Giorgio Chinaglia is England 25855.555555555555%
comp: The home country of the sport associated with Giorgio Chinaglia is Italy -70.28394255874673%
guide: The home country of association football is England -16.656384947563232%
first-hop: the sport associated with Giorgio Chinaglia is association football 0.1396252129471891%
input_encs: [[1, 450, 3271, 4234, 310, 278, 7980, 6942, 411, 25906, 601, 678, 262, 17474, 338]]
length of input_ids: 15
prefix: tensor([    1,   450,  3271,  4234,   310,   278,  7980,  6942,   411, 25906,
          601,   678,   262, 17474,   338], device='cuda:0')
input_encs: [[1, 450, 3271, 4234, 310, 278, 7980, 6942, 411, 25906, 601, 678, 262, 17474]]
length of input_ids: 14
prefix: tensor([    1,   450,  3271,  4234,   310,   278,  7980,  6942,   411, 25906,
          601,   678,   262, 17474], device='cuda:0')
check_tok_enc: [1, 15477, 5733]
check_tok_enc: [1, 5408]
input_encs: [[1, 450, 3271, 4234, 310, 278, 7980, 6942, 411, 25906, 601, 678, 262, 17474, 338], [1, 450, 3271, 4234, 310, 278, 7980, 6942, 411, 25906, 601, 678, 262, 17474, 338]]
length of input_ids: 15
input_encs: [[1, 450, 3271, 4234, 310, 278, 7980, 6942, 411, 25906, 601, 678, 262, 17474, 338], [1, 450, 3271, 4234, 310, 278, 7980, 6942, 411, 25906, 601, 678, 262, 17474, 338]]
length of input_ids: 15
