
################################
#                              #
#  Retrieving hyperparameters  #
#                              #
################################
ROMEHyperParams(layers=[17, 18, 19, 20, 21, 22, 23], fact_token='last', v_num_grad_steps=20, v_lr=0.1, v_loss_layer=31, v_weight_decay=0.001, clamp_norm_factor=4, kl_factor=0.0625, mom2_adjustment=False, rewrite_module_tmp='transformer.h.{}.mlp.fc_out', layer_module_tmp='model.layers.{}', mlp_module_tmp='model.layers.{}.mlp', attn_module_tmp='model.layers.{}.self_attn', ln_f_module='model.norm', lm_head_module='lm_head', mom2_dataset='wikipedia', mom2_n_samples=100000, mom2_dtype='float16', edit_mode='middle-attention', rewrite_module_tmp_mlp='model.layers.{}.mlp.down_proj', rewrite_module_tmp_attn='model.layers.{}.self_attn.o_proj', transpose=True, check_updated_vector=True)
check_tok_enc: [1, 3303, 3900, 310, 6813]
check_tok_enc: [1, 3872, 1056, 13329]
check_tok_enc: [1, 3303, 12626]

#####################################################
#                                                   #
#  Generating pre-update text for paraphrase cases  #
#                                                   #
#####################################################
The performer of I Feel Love is a citizen of the United States of America.
The
United States of America prob:0.010460153222084045,United Kingdom prob:0.018409132957458496

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: Which country does the performer of "I Feel Love" hold citizenship in?
A: Italy
Q: What is the name
United States of America prob:0.013369530439376831,United Kingdom prob:0.02381730079650879

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: What is the nationality of the performer of the song "I Feel Love"?
A: Donna Summer
Q: What is
United States of America prob:6.982684135437012e-05,United Kingdom prob:3.871321678161621e-05

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: To which country does the musician who performs "I Feel Love" belong?
A: Italy
Q: What is the name
United States of America prob:0.00700320303440094,United Kingdom prob:0.009118825197219849

###############################################################################
#                                                                             #
#  Key possibilities for comp, guide and first-hop with the pre-update model  #
#                                                                             #
###############################################################################
comp: The country of citizenship of the performer of I Feel Love is United States of America 0.029327064752578735
comp: The country of citizenship of the performer of I Feel Love is United Kingdom 0.055776447057724
guide: The country of citizenship of Donna Summer is United States of America 0.1147153377532959
first-hop: the performer of I Feel Love is Donna Summer 0.0747207800547282

############################
#                          #
#  Applying rome to model  #
#                          #
############################
Executing ROME algorithm for the update:  [The country of citizenship of the performer of I Feel Love is] -> [The country of citizenship of Donna Summer is]
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(4.0703, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0033, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0018, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(3.6289, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0038, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0019, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(6.2812, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0042, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0024, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(8.3984, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0043, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0027, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(6.0234, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0043, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0029, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(2.6660, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0083, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0080, device='cuda:0', dtype=torch.float16)
Computing left vector (u)...
Selected u projection token with last token
Left vector shape: torch.Size([4096])
Computing right vector (v)...
Selected v projection token with last token
Selected u projection token with last token
Right vector shape: torch.Size([4096])
torch.Size([4096, 4096])
Distance between v_new and v_old: tensor(3.6387, device='cuda:0', dtype=torch.float16)
Distance between v_new and v_target: tensor(0.0026, device='cuda:0', dtype=torch.float16)
Distance between pre v_old and now v_old: tensor(0.0015, device='cuda:0', dtype=torch.float16)
Deltas successfully computed for ['model.layers.17.self_attn.o_proj.weight', 'model.layers.18.self_attn.o_proj.weight', 'model.layers.19.self_attn.o_proj.weight', 'model.layers.20.self_attn.o_proj.weight', 'model.layers.21.self_attn.o_proj.weight', 'model.layers.22.self_attn.o_proj.weight', 'model.layers.23.self_attn.o_proj.weight']
Time elapsed: 1.78 seconds
New weights successfully inserted into ['model.layers.17.self_attn.o_proj.weight', 'model.layers.18.self_attn.o_proj.weight', 'model.layers.19.self_attn.o_proj.weight', 'model.layers.20.self_attn.o_proj.weight', 'model.layers.21.self_attn.o_proj.weight', 'model.layers.22.self_attn.o_proj.weight', 'model.layers.23.self_attn.o_proj.weight']

######################################################
#                                                    #
#  Generating post-update text for paraphrase cases  #
#                                                    #
######################################################
The performer of I Feel Love is a citizen of the United States of America.
The
United States of America prob(post-pre):59.62542505438274%,United Kingdom prob(post-pre):57.278519947936566%

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: Which country does the performer of "I Feel Love" hold citizenship in?
A: The United States
Q: What is
United States of America prob(post-pre):150.6617150423422%,United Kingdom prob(post-pre):148.8872288457111%

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: What is the nationality of the performer of the song "I Feel Love"?
A: Donna Summer
Q: What is
United States of America prob(post-pre):172.27912932138284%,United Kingdom prob(post-pre):263.74133949191685%

Q: Who is the prime minister of Canada?
A: Justin Trudeau
Q: To which country does the musician who performs "I Feel Love" belong?
A: Donna Summer
Q: What is
United States of America prob(post-pre):104.79385161401515%,United Kingdom prob(post-pre):119.88286701288004%

###############################################################################
#                                                                             #
#  Key possibilities for comp, guide and first-hop with the pre-update model  #
#                                                                             #
###############################################################################
comp: The country of citizenship of the performer of I Feel Love is United States of America 299.07057851558807%
comp: The country of citizenship of the performer of I Feel Love is United Kingdom 301.3854314104856%
guide: The country of citizenship of Donna Summer is United States of America 1.0647904711826433%
first-hop: the performer of I Feel Love is Donna Summer 0.5563398407794043%
input_encs: [[1, 450, 4797, 537, 310, 278, 2189, 261, 310, 278, 4823, 376, 29902, 5169, 295, 8155, 29908, 338]]
length of input_ids: 18
prefix: tensor([    1,   450,  4797,   537,   310,   278,  2189,   261,   310,   278,
         4823,   376, 29902,  5169,   295,  8155, 29908,   338],
       device='cuda:0')
input_encs: [[1, 450, 4797, 537, 310, 278, 2189, 261, 310, 278, 4823, 376, 29902, 5169, 295, 8155, 29908]]
length of input_ids: 17
prefix: tensor([    1,   450,  4797,   537,   310,   278,  2189,   261,   310,   278,
         4823,   376, 29902,  5169,   295,  8155, 29908], device='cuda:0')
check_tok_enc: [1, 3872, 1056, 13329]
check_tok_enc: [1, 3303, 3900, 310, 6813]
input_encs: [[1, 450, 4797, 537, 310, 278, 2189, 261, 310, 278, 4823, 376, 29902, 5169, 295, 8155, 29908, 338], [1, 450, 4797, 537, 310, 278, 2189, 261, 310, 278, 4823, 376, 29902, 5169, 295, 8155, 29908, 338]]
length of input_ids: 18
input_encs: [[1, 450, 4797, 537, 310, 278, 2189, 261, 310, 278, 4823, 376, 29902, 5169, 295, 8155, 29908, 338], [1, 450, 4797, 537, 310, 278, 2189, 261, 310, 278, 4823, 376, 29902, 5169, 295, 8155, 29908, 338]]
length of input_ids: 18
